name: Terraform CI/CD

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform:
    name: 'Terraform Lint, Security Check, and Deploy'
    runs-on: ubuntu-latest
    # Run only on push events
    if: github.event_name == 'push' 

    env:
      AWS_REGION: 'us-west-2'
      TF_VERSION: '1.9.0'
      TFLINT_VERSION: '0.46.1'  # Updated to a more recent version
      TFSEC_VERSION: '1.28.1'   # Updated to a more recent version

    steps:
    - name: 'Checkout GitHub repository'
      uses: actions/checkout@v4

    - name: 'Configure AWS credentials'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 'Set up Terraform'
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: 'Install TFLint'
      id: tflintinstall
      run: |
        curl -sLo tflint.zip https://github.com/terraform-linters/tflint/releases/download/v${{ env.TFLINT_VERSION }}/tflint_linux_amd64.zip
        unzip tflint.zip -d /usr/local/bin/
        tflint --version

# check outcome of tflint istallation

    - name: Check tflint install status
      if: steps.tflintinstall.outcome == 'success' 
      run: echo "✅ tflint istallation successful !"

    - name: 'Install tfsec'
      id: tfsecinstall
      run: |
        curl -sLo tfsec https://github.com/aquasecurity/tfsec/releases/download/v${{ env.TFSEC_VERSION }}/tfsec-linux-amd64
        chmod +x tfsec
        mv tfsec /usr/local/bin/
        tfsec --version

    - name: Check tfsec install status
      if: steps.tfsecinstall.outcome == 'success' 
      run: echo "✅ tfsec istallation successful !"

    - name: 'Terraform Init'
      run: terraform init
# check to enforce formatting. fail the pipeline if formatting issues are found.
    - name: 'Terraform Format'
      run: terraform fmt -check -diff 

    - name: 'Terraform Validate'
      run: terraform validate

    - name: Init TFLint
      id: tflintinit
      run: tflint --init

      # check outcome of tflint init

    - name: Check tflint init status
      if: steps.tflintinit.outcome == 'success' 
      run: echo "✅ tflint init successful !"

    - name: Run TFLint
      id: tflint
      run: tflint -f compact 

    - name: Check tflint success
      if: steps.tflint.outcome == 'success' 
      run: echo "✅ TfLint check passed!"
      
    - name: Check tflint failure
      if: steps.tflint.outcome == 'failure'
      run: |
        echo "❌ TfLint check failed. Please correct the following issues:"
        tflint -f compact
        exit 1

    - name: 'tfsec'
      id: tfsec
      # run: tfsec . --format json
      run: tfsec . --format json --minimum-severity LOW

    - name: Check tfsec status and fail on tfsec errors
      if: steps.tfsec.outcome == 'failure'
      run: |
        echo "❌ tfsec found security issues. Please review and fix the following:"
        tfsec . --format json
        exit 1

    - name: Check tfsec success
      if: steps.tfsec.outcome == 'success'
      run: echo "✅ tfsec security check passed!"

    - name: 'Terraform Plan'
      id: plan
      run: terraform plan -out=tfplan

    - name: Terraform plan status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: 'Terraform Apply'
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve tfplan

  destroy:
    name: "Destroy Cloud Infrastructure of AWS"
    runs-on: ubuntu-latest
    env:
      AWS_REGION: 'us-west-2'
      TF_VERSION: '1.9.0'
  # Only trigger for workflow_dispatch
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: 'Checkout GitHub repository'
        uses: actions/checkout@v4
  
      - name: 'Configure AWS credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 'Set up Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 'Terraform Init'
        run: terraform init
      
      - name: 'Terraform Plan Destroy'
        run: terraform plan -destroy -out=tfplan-destroy

      - name: 'Terraform Apply Destroy'
        run: terraform apply -auto-approve tfplan-destroy